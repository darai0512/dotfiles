" キー割り当て nmap=nnoremap=Normal-mode key Mapping
" nmap  hx
" 挿入モード(inor)でのカーソル移動
inoremap <C-j> <Down>
inoremap <C-k> <Up>
inoremap <C-l> <Right>
inoremap <C-h> <Left>

se pastetoggle=<C-z>
autocmd InsertLeave * set nopaste
" 上記によるビープ音を削除,フラッシュにしたければset visualbell
set vb t_vb=

"Display
se sm
se ai
syntax on
se nu
nnoremap <silent> <C-m> :<C-u>setlocal number!<CR>

" 基本
set nocompatible
set shiftwidth=2
set tabstop=2
set et
set shellslash
"set t_kD=

"全角スペース
highlight ZenkakuSpace cterm=underline ctermfg=lightblue guibg=white
match ZenkakuSpace /　/

" :vim[grep] {pattern} {file} (| cw で一覧表示)のヒット件数設定
"nnoremap [b :cprevious<CR>   " 前へ
"nnoremap ]f :cnext<CR>       " 次へ
"nnoremap [B :<C-u>cfirst<CR> " 最初へ
"nnoremap ]F :<C-u>clast<CR>  " 最後へ
" :ar[gs] (よく使う語) で登録し"##"で使える。
" {file}の正規表現
" % (カレントファイルのみ)
" * (カレントディレクトリ内の全ファイル)
" ** (カレントディレクトリ以下の全ファイル) app/** (app以下の全ファイル)
" app/**/test*.txt (app以下でtestから始まり.txtで終わる全ファイル)

"色を変える
highlight Comment ctermfg=Green
highlight Constant ctermfg=Red
highlight Identifier ctermfg=208
highlight Statement ctermfg=Yellow
highlight Title ctermfg=Magenta
highlight Special ctermfg=Magenta
highlight PreProc ctermfg=Magenta
highlight Visual ctermbg=5

" statusline (cf. plugin: lightline.vim)
set cmdheight=1
set laststatus=2
set showcmd
set statusline=%F%m%r%h%w\ [TYPE=%Y][ASCII=\%03.3b][ENC=%{&fileencoding}][POS=%04l,%04v]

"mouse
"set mouse=a
"set ttymouse=xterm2

"Encode
set encoding=utf-8
set fileencodings=utf-8,iso-2022-jp,euc-jp,ucs-2le,ucs-2,cp932

" read template(%:e = pl ...etc)
autocmd BufNewFile * silent! 0r $VIMHOME/templates/%:e.tpl

" https://github.com/Shougo/neobundle.vim
" プラグイン let g:vundle_default_git_proto = 'git' 
if 0 | endif

if has('vim_starting')
  if &compatible
    set nocompatible               " Be iMproved
  endif

  " Required:
  set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

" Required:
call neobundle#begin(expand('~/.vim/bundle/'))
" Let NeoBundle manage NeoBundle
" Required:
NeoBundleFetch 'Shougo/neobundle.vim'

" My Bundles here:
NeoBundle 'davidhalter/jedi-vim'
NeoBundle 'thinca/vim-quickrun' 
" quickrun exec: \r or :QuickRun -args 1 -args 2 -args 3
NeoBundle 'kevinw/pyflakes-vim' 
NeoBundle 'nvie/vim-flake8' 
"NeoBundle 'AutoComplPop'
NeoBundle 'osyo-manga/vim-anzu'

call neobundle#end()

" Required:
filetype plugin indent on

" 再起動で自動インストール
NeoBundleCheck
" after install, :NeoBundleUpdate

" jedi https://github.com/davidhalter/jedi-vim/blob/master/doc/jedi-vim.txt
autocmd FileType python setlocal completeopt-=preview "補完時の画面分割を回避
let g:jedi#auto_vim_configuration = 0 "自動設定機能をOFFにし手動で設定
let g:jedi#popup_select_first = 0 "補完の最初の項目が選択された状態を回避
let g:jedi#rename_command = '<Leader>R' "quickrunと被るため大文字に変更
let g:jedi#completions_command = "<C-p>" "補完

" QucikRunなど画面分割をC-cで終了
nnoremap <C-c> :only<CR>
" quickrun config 
" https://github.com/thinca/vim-quickrun/blob/637aa0f9eab485874eb3606be35586735855d880/autoload/quickrun.vim#L16
let g:quickrun_config = {}
let g:quickrun_config['_'] = {'runmode': 'async:remote:vimproc', 'split': 'below'}
"let g:quickrun_config['python.t'] = {'command': 'nosetests ', 'exec': ['%c -v %s']}
"let g:quickrun_config['python.t'] = {'command': 'python ~/loader_premium/manage.py test tests -v 1', 'exec': ['%c']}

" kevinw/pyflakes-vim to disable quickfix support
"let g:pyflakes_use_quickfix = 0

"flake8による文法チェックを保存の度行う
"autocmd BufWrite *.py :call Flake8()

"vim-anzu
nmap n <Plug>(anzu-n-with-echo)
nmap N <Plug>(anzu-N-with-echo)
nmap * <Plug>(anzu-star-with-echo)
nmap # <Plug>(anzu-sharp-with-echo)
" clear status(入力が一定時間ない、window切替、insert mode)
"augroup vim-anzu
"    autocmd!
"    autocmd CursorHold,CursorHoldI,WinLeave,InsertEnter * set nohlsearch
"augroup END
"se ic "検索時大文字小文字区別(ignorecase) or \c (単発)


augroup python_test
    autocmd!
    autocmd BufWinEnter,BufNewFile test*.py set ft=python.t
augroup END
function! s:tpy(db)
    :w!
    let manage = '~/loader_premium/lib/manage.py'
    let test = 'test'
    if (a:db == 'nodb')
        let test = 'test_nodb'
    endif
    if (&ft=='python')
        let file_path = expand("%")
        let file = fnamemodify(file_path, ":t:r")
        exe '!python ' . manage . ' ' . test . ' tests -v 1'
".test_' . file . ' -v 1'
    endif
    if (&ft=='python.t')
        exe '!python ' . manage . ' ' . test . ' %:p -v 1'
    endif
endfunction
command! -nargs=* Tpy call <SID>tpy(<f-args>)
"call <SID>tpy(<f-args>)<CR>
nmap <silent> <C-e> :Tpy nodb<CR>
